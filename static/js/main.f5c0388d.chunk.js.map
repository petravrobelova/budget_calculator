{"version":3,"sources":["components/ExpenseItem.js","components/ExpenseList.js","components/ExpenseForm.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["ExpenseItem","expense","handleEdit","handleDelete","id","charge","amount","className","aria-label","onClick","ExpenseList","expenses","clearItems","map","key","length","ExpenseForm","handleCharge","handleAmount","handleSubmit","edit","onSubmit","htmlFor","type","name","placeholder","value","onChange","Alert","text","initialExpenses","localStorage","getItem","JSON","parse","App","useState","setExpenses","setCharge","setAmount","show","alert","setAlert","setEdit","setId","useEffect","setItem","stringify","handleAlert","setTimeout","e","target","preventDefault","tempExpenses","item","singleExpense","uuid","filteredItems","filter","find","reduce","acc","curr","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f5c0388d.chunk.js","sourcesContent":["import React from 'react'\n\nimport {MdEdit, MdDelete} from 'react-icons/md';\n\nconst ExpenseItem = ({expense, handleEdit, handleDelete}) => {\n    const {id, charge, amount} = expense\n    \n    return (\n        <li className=\"item\">\n            <div className=\"info\">\n                <span className=\"expense\">{charge}</span>\n                <span className=\"amount\">${amount}</span>\n            </div>\n            <div>\n            <button className=\"edit-btn\" aria-label=\"edit button\" onClick={() => handleEdit(id)}>\n                <MdEdit />\n            </button>\n            <button className=\"clear-btn\" aria-label=\"delete button\" onClick={() => handleDelete(id)}>\n                <MdDelete />\n            </button>\n            </div>\n        </li>\n    )\n}\n\nexport default ExpenseItem;\n\n","import React from 'react';\nimport ExpenseItem from './ExpenseItem';\n\nimport {MdDelete} from 'react-icons/md'\n\nconst ExpenseList = ({expenses, handleDelete, handleEdit, clearItems}) => {\n    return (\n        <>\n            <ul className=\"list\">\n                {expenses.map((expense) => {\n                    return <ExpenseItem key={expense.id} expense={expense}\n                            handleDelete={handleDelete} handleEdit={handleEdit} />\n                })}\n            </ul>\n            {/* only if the expenses are not empty, the button will be displayed */}\n            {expenses.length > 0 && (\n            <button className=\"btn\" onClick={clearItems}>\n                clear expenses\n                <MdDelete className=\"btn-icon\" />\n            </button>\n            )}\n        </>\n    )\n}\n\nexport default ExpenseList;\n\n","import React from 'react';\nimport {MdSend} from 'react-icons/md';\n\nconst ExpenseForm = ({charge, amount, handleCharge, handleAmount, handleSubmit, edit}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div className=\"form-center\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"expense\">charge</label>\n                        <input \n                        type=\"text\" \n                        className=\"form-control\" \n                        id=\"charge\" \n                        name=\"charge\"\n                        placeholder=\"e.g. rent\"\n                        value={charge}\n                        onChange={handleCharge}/>\n                    <label htmlFor=\"amount\">charge</label>\n                        <input \n                        type=\"number\" \n                        className=\"form-control\" \n                        id=\"amount\" \n                        name=\"amount\"\n                        placeholder=\"e.g. 100\"\n                        value={amount}\n                        onChange={handleAmount}/>\n                </div>\n            </div>\n            <button type=\"submit\" className=\"btn\">\n                {edit?'edit' : 'submit'}\n                <MdSend className=\"btn-icon\"></MdSend>\n            </button>\n        </form>\n    )\n}\n\nexport default ExpenseForm;\n\n","import React from 'react'\n\nconst Alert = ({type, text}) => {\n    return (\n        <div className={`alert alert-${type}`}>\n            {text}\n        </div>\n    )\n}\n\nexport default Alert;\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport { v4 as uuid } from 'uuid';\n\nimport ExpenseList from './components/ExpenseList';\nimport ExpenseForm from './components/ExpenseForm';\nimport Alert from './components/Alert';\n\nconst initialExpenses = localStorage.getItem('expenses') \n? JSON.parse(localStorage.getItem('expenses')) \n: [];\n\nfunction App() {\n// state values\n//all expenses, add expense\nconst [expenses, setExpenses] = useState(initialExpenses);\n\n//single expense\nconst [charge, setCharge] = useState('');\n\n//single amount\nconst [amount, setAmount] = useState('');\n\n//alert\nconst [alert, setAlert] = useState({show:false})\n\n//edit\nconst [edit, setEdit] = useState(false)\n\n//edit item\nconst [id, setId] = useState(0)\n\n//use effect\nuseEffect(() => {\n  localStorage.setItem('expenses', JSON.stringify(expenses))\n}, [expenses])\n\n\n//functionality\nconst handleCharge = e => {\n  setCharge(e.target.value)\n}\n\nconst handleAmount = e => {\n  setAmount(e.target.value)\n}\n\nconst handleAlert = ({type, text}) => {\n  setAlert({show:true, type, text});\n  setTimeout(() => {\n    setAlert({show:false})\n  }, 3000)\n}\n\nconst handleSubmit = e => {\n  e.preventDefault();\n  if(charge !== '' && amount > 0) {\n    if(edit){\n      let tempExpenses = expenses.map(item => {\n        //we are overwriting the state with ternary operator\n        return item.id === id ? {...item, charge, amount}: item\n      }); \n      setExpenses(tempExpenses);\n      setEdit(false);\n      handleAlert({type: 'success', text:'item edited'})\n    } else {\n      const singleExpense = {id: uuid(), charge, amount}\n      setExpenses([...expenses, singleExpense]);\n      handleAlert({type: 'success', text:'item added'})\n    }\n\n    setCharge('');\n    setAmount('');\n\n  } else {\n    handleAlert({type:'danger', text:`charge can't be empty value and amount has to be bigger than zero`})\n  }\n}\n\nconst clearItems = () => {\n  setExpenses([]);\n  handleAlert({type: 'danger', text: 'all items deleted'});\n}\n\nconst handleDelete = (id) => {\n  let filteredItems = expenses.filter(item =>\n    item.id !== id);\n    setExpenses(filteredItems);\n    handleAlert({type: 'danger', text: 'item deleted'});\n}\n\nconst handleEdit = (id) => {\n  let expense = expenses.find(item => item.id === id);\n  let {charge, amount} = expense;\n  setCharge(charge);\n  setAmount(amount);\n  setEdit(true);\n  setId(id);\n}\n\n  return (\n    <>\n    {alert.show && <Alert type={alert.type} text={alert.text}/>}\n      \n      <h1>budget calculator</h1>\n      <main className=\"App\">\n      <ExpenseForm \n      charge={charge}\n      amount={amount}\n      handleAmount={handleAmount}\n      handleSubmit={handleSubmit}\n      handleCharge={handleCharge}\n      edit={edit}/>\n      <ExpenseList expenses={expenses}\n      handleDelete={handleDelete}\n      handleEdit={handleEdit}\n      clearItems={clearItems}/>\n      </main>\n      <h1>total spending : <span className=\"total\">\n        $ {expenses.reduce((acc, curr) => {\n          //parse int - the function takes the input as a string, so we have to convert it\n          return acc += parseInt(curr.amount)\n        }, 0)}</span></h1>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}